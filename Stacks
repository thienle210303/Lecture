public interface StackI <T> {
	public void push(T aData);
	public T pop();
	public T peek();
	public void print();
}

public class ArrayStack<T> implements StackI<T> {
	private T[] stack;
	private int head; //first null element
	public static final int DEF_SIZE = 100;
	public ArrayStack()
	{
		init(DEF_SIZE);
	}
	public ArrayStack(int size)
	{
		init(size);
	}
	public void init(int size)
	{
		head = 0;
		if(size >= 1)
			stack = (T[])(new Object[size]);
		else
			stack = (T[])(new Object[DEF_SIZE]);
	}
	public void push(T aData)
	{
		if(head >= stack.length) //check if it out of bound
			return;
		stack[head] = aData;
		head++;
	}
	public T pop()
	{
		if(head == 0)
			return null;
		T ret = stack[head-1];
		head--;
		return ret;
	}
	public T peek()
	{
		if(head == 0)
			return null;
		return stack[head-1];
	}
	public void print()
	{
		for(int i = head-1;i>=0;i--)
		{
			System.out.println(stack[i]);
		}
	}
}

public class LLStack<T> implements StackI<T>{
	private class ListNode{
		T data;
		ListNode link;
		public ListNode(T aData, ListNode aLink)
		{
			data = aData;
			link = aLink;
		}
	}
	private ListNode head;
	public LLStack()
	{
		head = null;
	}
	public void push(T aData)
	{
		ListNode newNode = new ListNode(aData, head);
		head = newNode;
	}
	public T pop()
	{
		if(head == null)
			return null;
		T ret = head.data;
		head = head.link;
		return ret;
	}
	public T peek()
	{
		if(head == null)
			return null;
		return head.data;
	}
	public void print()
	{
		for(ListNode temp = head; temp!= null; temp = temp.link)
		{
			System.out.println(temp.data);
		}
	}
}
