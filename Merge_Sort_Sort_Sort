import java.util.Scanner;
public class Main {
	public static final Scanner keyboard = new Scanner(System.in);
	public static int SIZE = 100;
	public static String[] H = new String[SIZE];
	public static String[] T;
	public static void main(String[] args) {
	System.out.println("--!--!--Welcome to the SORT SORT SORT program--!--!--");
	boolean done = false;
	while(done == false)
	{
		H = new String[SIZE]; //Use to reset the array everytime play again
		System.out.println("!!Get Go!! \nPlease Enter any number of strings"
				+ " and I will SORT SORT SORT by SORT's"
				+ "\nEnter \'quit\' to SORT SORT SORT");
		boolean play = true;
		while(play == true)
		{
			for(int i = 0; i<H.length;i++)
			{
				String input = keyboard.nextLine(); //take the user input
				if(input.equalsIgnoreCase("quit")) //quit
					break;
				else
				{
					H[i] = input;
				}
			}
			play = false;
		}
		String[] T = copy(H);//create a new array without a null value
		for(int i = 0;i<T.length;i++)
		{
			System.out.println("Here is your list: "+T[i]);
		}
		mergeSort(T);
		System.out.println("\nHere is sort list by SORT SORT SORT:");
		for(int i = 0; i<T.length; i++)
		{
			if(T[i]!=null)
				System.out.println(T[i]);
		}
		System.out.print("\nDo you want to play again? Enter \"Yes\" to play again or else to quit ");
		String input2 = keyboard.nextLine();
		if(input2.equalsIgnoreCase("yes"))
		{
			continue;
		}
		else
			done = true;
	}
	System.out.println("BYE!");
	}


	public static int countSort(String a)
	{
		String e = a.toLowerCase(); //change string to lower case
		int count = 0; //make the counter
		String st = "sort";
		int N = e.length();
		int M = st.length();
		int diff = N-M; //make this int to let the for-loop not out of bound
		for(int i = 0; i<=diff;i++) //the char in user input string
		{
			int j;//the char in "sort"
			for(j = 0; j<M;j++)
			{
				if(e.charAt(i+j) != st.charAt(j)) //check
					break;
			}
			if(j == st.length()) //count up the number of sort
			{
				count++;
				j=0;
			}
		}
		return count;
	}
	public static String[] copy(String[]a) //copy a array with out a null value
	{
		int count = 0;
		for(int i = 0;i<a.length;i++)
		{
			if(a[i] != null)
				count++;
		}
		String[] b = new String[count];
		for(int i = 0;i<b.length;i++)
		{
			b[i] = a[i];
		}
		return b;
	}
	public static void mergeSort(String[] a) //merge sort
	{
		int size = a.length;
		if(size <2)
			return;
		int mid = size/2;
		int leftSize = mid;
		int rightSize = size-mid;
		String[]left = new String[leftSize];
		String[]right = new String[rightSize];
		for(int i = 0; i<mid;i++ )
			left[i]= a[i];
		for(int i = mid;i<size;i++)
			right[i-mid] = a[i];
		mergeSort(left);
		mergeSort(right);
		merge(left,right,a);
	}
	public static void merge(String[] left, String[] right, String[] a)
	{
		int leftSize = left.length;
		int rightSize = right.length;
		int i = 0;
		int j = 0;
		int k = 0;
		while(i<leftSize && j<rightSize)
		{
			if(countSort(left[i]) <= countSort(right[j]))
			{
				a[k] = left[i];
				i++;
				k++;
			}
			else
			{
				a[k] = right[j];
				j++;
				k++;
			}
		}
		while(i<leftSize)
		{
			a[k] = left[i];
			i++;
			k++;
		}
		while(j<rightSize)
		{
			a[k] = right[j];
			j++;
			k++;
		}
	}
}
