public interface StackI <T> {
	public void push(T aData);
	public T pop();
	public T peek();
	public void print();

}

public class ArrayStack<T> implements StackI<T> {
	private T[] stack;
	private int head; //first null element
	public static final int DEF_SIZE = 100;
	public ArrayStack()
	{
		init(DEF_SIZE);
	}
	public ArrayStack(int size)
	{
		init(size);
	}
	public void init(int size)
	{
		head = 0;
		if(size >= 1)
			stack = (T[])(new Object[size]);
		else
			stack = (T[])(new Object[DEF_SIZE]);
	}
	public void push(T aData)
	{
		if(head >= stack.length) //check if it out of bound
			return;
		stack[head] = aData;
		head++;
	}
	public T pop()
	{
		if(head == 0)
			return null;
		T ret = stack[head-1];
		head--;
		return ret;
	}
	public T peek()
	{
		if(head == 0)
			return null;
		return stack[head-1];
	}
	public void print()
	{
		for(int i = head-1;i>=0;i--)
		{
			System.out.println(stack[i]);
		}
	}
}


public class LLStack<T> implements StackI<T>{
	private class ListNode{
		T data;
		ListNode link;
		public ListNode(T aData, ListNode aLink)
		{
			data = aData;
			link = aLink;
		}
	}
	private ListNode head;
	public LLStack()
	{
		head = null;
	}
	public void push(T aData)
	{
		ListNode newNode = new ListNode(aData, head);
		head = newNode;
	}
	public T pop()
	{
		if(head == null)
			return null;
		T ret = head.data;
		head = head.link;
		return ret;
	}
	public T peek()
	{
		if(head == null)
			return null;
		return head.data;
	}
	public void print()
	{
		for(ListNode temp = head; temp!= null; temp = temp.link)
		{
			System.out.println(temp.data);
		}
	}
}

import java.util.Random;
public class MazeGame {
	public static final int MAZE_SIZE = 10;
	public static final int OBST_AMT = (MAZE_SIZE*MAZE_SIZE)/10;
	private char[][] maze;
	public static final char EMPTY = '_';
	public static final char OBST = 'X';
	public static final char PLAYER = 'H';
	public static final char PATH = '#';
	
	public static final String NORTH = "Go North";
	public static final String SOUTH = "Go South";
	public static final String WEST = "Go West";
	public static final String EAST = "Go East";
	public static final String BACK = "Go Back";
	
	private StackI<int[]> locations;
	private int[] currLoc; //index 0 = y, index 1 = x
	
	public MazeGame()
	{
		this.init();
	}
	public void init()
	{
		maze = new char[MAZE_SIZE][MAZE_SIZE];
		for(int i = 0;i<maze.length;i++)
			for(int j = 0; j<maze[i].length;j++)
				maze[i][j] = EMPTY;
		this.addObstacle();
		
		maze[0][0] = PLAYER;
		currLoc = new int[] {0,0};
		locations = new LLStack<int[]>();
		
	}
	private void addObstacle()
	{
		Random r = new Random();
		for(int i = 0;i<OBST_AMT;i++)
		{
			int x = r.nextInt(MAZE_SIZE);
			int y = r.nextInt(MAZE_SIZE);
			if(maze[y][x] != EMPTY || (x==0 && y == 0))
				continue;
			maze[y][x] = OBST;
		}
	}
	public void printMoveOptions()
	{
		int currY = currLoc[0];
		int currX = currLoc[1];
		int[]prevLoc = locations.peek();
		//North
		if(isValid(currY-1) && maze[currY-1][currX] != OBST)
		{
			if(prevLoc != null && currY-1 == prevLoc[0] && currX == prevLoc[1])
				System.out.println(BACK);
			else
				System.out.println(NORTH);
		}
		//South
		if(isValid(currY+1) && maze[currY+1][currX]!= OBST)
		{
			if(prevLoc != null && currY+1 == prevLoc[0] && currX == prevLoc[1])
				System.out.println(BACK);
			else
				System.out.println(SOUTH);
		}
		//WEST
		if(isValid(currX-1) && maze[currY][currX-1]!= OBST)
		{
			if(prevLoc != null && currY == prevLoc[0] && currX-1 == prevLoc[1])
				System.out.println(BACK);
			else
				System.out.println(WEST);
		}
		//EAST
		if(isValid(currX+1) && maze[currY][currX+1]!= OBST)
		{
			if(prevLoc != null && currY == prevLoc[0] && currX+1 == prevLoc[1])
				System.out.println(BACK);
			else
				System.out.println(SOUTH);
		}
		
	}
	public void move(String input)
	{
		maze[currLoc[0]][currLoc[1]] = EMPTY;
		int currY = currLoc[0];
		int currX = currLoc[1];
		int[] copyLoc = {currLoc[0],currLoc[1]};
		if(input.equalsIgnoreCase(NORTH)) //move north
		{
			if(isValid(currY-1) && maze[currY-1][currX] != OBST)
			{
				locations.push(copyLoc);
				currLoc[0]--;
			}
			else
			{
				System.out.println("Invalid move");
			}
		}
		else if(input.equalsIgnoreCase(SOUTH)) //move south
		{
			if(isValid(currY+1) && maze[currY+1][currX] != OBST)
			{
				locations.push(copyLoc);
				currLoc[0]++;
			}
			else
			{
				System.out.println("Invalid move");
			}
		}
		else if(input.equalsIgnoreCase(WEST)) //move west
		{
			if(isValid(currX-1) && maze[currY][currX-1] != OBST)
			{
				locations.push(copyLoc);
				currLoc[1]--;
			}
			else
			{
				System.out.println("Invalid move");
			}
		}
		else if(input.equalsIgnoreCase(EAST)) //move east
		{
			if(isValid(currX+1) && maze[currY][currX+1] != OBST)
			{
				locations.push(copyLoc);
				currLoc[1]++;
			}
			else
			{
				System.out.println("Invalid move");
			}
		}
		else if(input.equalsIgnoreCase(BACK))
		{
			if(locations.peek() != null)
			{
				int[] prevLoc = locations.pop();
				currLoc[0] = prevLoc[0];
				currLoc[1] = prevLoc[1];
			}
			else {
				System.out.println("Invalid Move");
			}
		}
		else
		{
			System.out.println("Invalid Move");
		}
		maze[currLoc[0]][currLoc[1]] = PLAYER;
	}
	private boolean isValid(int index)
	{
		return index >= 0 && index < maze.length;
	}
	public boolean getWin()
	{
		return currLoc[0] == maze.length-1 && currLoc[1] == maze.length-1;
	}
	public void reset()
	{
		this.init();
	}
	public void printFullMaze()
	{
		for(int i = 0; i<maze.length;i++)
		{
			for(int j =0; j<maze.length; j++)
			{
				System.out.println(maze[i][j]);
			}
			System.out.println();
		}
	}
	public void printFullMazeWithPath()
	{
		while(locations.peek() != null)
		{
			int[] temp = locations.pop();
			maze[temp[0]][temp[1]] = PATH;
		}
		this.printFullMaze();
	}
	}
  
  
  import java.util.Scanner;
public class MazeGameFE {
	
	public static Scanner keyboard = new Scanner(System.in);
	public static MazeGame game = new MazeGame();
	public static final String GIVE_UP = "Give Up";
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		boolean playGame = true;
		while(playGame)
		{
			System.out.println("Welcome to the Maze in the Dark!");
			game.reset();
			boolean gameOver = false;
			while(!gameOver)
			{
				game.printMoveOptions();
				System.out.println(GIVE_UP);
				String input = keyboard.nextLine();
				if(input.equalsIgnoreCase(GIVE_UP))
				{
					gameOver = true;
					game.printFullMaze();
				}
				else
					game.move(input);
				if(game.getWin())
				{
					System.out.println("You Win!");
					game.printFullMazeWithPath();
					gameOver = true;
				}
			}
			System.out.println("Enter \"yes\" to play again.");
			playGame = keyboard.nextLine().equalsIgnoreCase("yes");
		}
		System.out.println("GoodBye!");
	}

}

