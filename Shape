/*
	 * Problem: create a program that can draw a variety of shapes in the console
	 * Draw shapes in the console at set locations
	 * -Horizontal Spacing
	 * -Vertical Spacing
	 * Some Shapes mentioned were:
	 * -Rectangle
	 * -Triangle
	 * -More?
	 * Shapes could be drawn in a variety of ways
	 * -filled
	 * -hollow
	 * -upside down triangle
	 * -checkered rectangle
	 * -horizontal striped rectangle
	 * -vertical striped rectangle
	 * -etc.
	 * 
 */

public interface Shape {
	public void setHSpace(int aH);
	public int getHSpace();
	public void drawShape();
	public void drawShapeAt(int lineNumber);
}

public interface Rectangle extends Shape
{
	public int getWidth();
	public int getLength();
	public void setWidth(int aW);
	public void setLength(int aL);
}

public interface Triangle {
	public int getHeight();
	public void setHeight(int aHe);
}

public class BasicShape implements Shape
{
	private int hSpace;
	public BasicShape()
	{
		this.hSpace = 0;
	}
	public BasicShape(int aH)
	{
		this.setHSpace(aH);
	}
	public int getHSpace()
	{
		return this.hSpace;
	}
	public void setHSpace(int aH)
	{
		if(aH >= 0)
			this.hSpace = aH;
		else
			this.hSpace = 0;
	}
	public void drawShape()
	{
		skipSpaces(this.hSpace);//skip the number of space in the static.
		System.out.println("*");
	}
	public void drawShapeAt(int lineNumber)
	{
		for(int i = 0;i<lineNumber;i++)
			System.out.println();
		drawShape();
	}
	public static void skipSpaces(int aH)
	{
		for(int i = 0; i<aH; i++)
			System.out.println(" ");
	}
}

public class BasicRectangle extends BasicShape implements Rectangle
{
	private int length;
	private int width;
	
	public BasicRectangle()
	{
		super();
		this.length = this.width = 1;
	}
	public BasicRectangle(int aH, int aL, int aW)
	{
		super(aH);
		this.setHSpace(aW);
		this.setLength(aL);
	}
	public int getWidth()
	{
		return this.width;
	}
	public int getLength()
	{
		return this.length;
	}
	public void setWidth(int aW) {
		if (aW >= 1)
			this.width = aW;
		else
			this.width = 1;
	}
	public void setLength(int aL) {
		if(aL >= 1)
			this.length = aL;
		else
			this.length = 1;
	}
	public void drawShape()
	{
		for(int i = 0;i<this.length;i++)
		{
			skipSpaces(super.getHSpace());
			for(int j = 0; j<this.width;j++)
				System.out.println("*");
			System.out.println();
		}
	}
}

public class BasicTriangle extends BasicShape implements Triangle
{
	private int height;
	public BasicTriangle()
	{
		super();
		this.height = 1;
	}
	public BasicTriangle(int aH, int aHe)
	{
		super(aH);
		this.setHeight(aHe);
	}
	public int getHeight()
	{
		return height;
	}
	public void setHeight(int aHe)
	{
		if(aHe>=1)
			this.height = aHe;
		else 
			this.height = 1;
	}
	public void drawShape()
	{
		for(int i = 0; i<this.height;i++)
		{
			skipSpaces(super.getHSpace());
			for(int j = 0; j<i+1;j++)
			{
				System.out.println("*");
			}
			System.out.println();
		}
	}
}

public class HollowTriangle extends BasicTriangle
{
	public HollowTriangle()
	{
		super();
	}
	public HollowTriangle(int aH,int aHe)
	{
		super(aH,aHe);
	}
	public void drawShape()
	{
		//Top point
		skipSpaces(super.getHeight());
		System.out.println("*");
		int innerSpaces = 0;
		for(int i=0; i< super.getHeight()-2;i++)
		{
			skipSpaces(super.getHeight());
			System.out.println("*");
			skipSpaces(innerSpaces);
			innerSpaces++;
			System.out.println("*");
		}
		
		//Bot line
		skipSpaces(super.getHSpace());
		for(int i = 0; i< super.getHeight(); i++) {
			System.out.println("*");
		}
		System.out.println();
	}
}

public class HollowRectangle extends BasicRectangle
{
	public HollowRectangle()
	{
		super();
	}
	public HollowRectangle(int aH, int aL, int aW)
	{
		super(aH,aL,aW);
	}
	public void drawShape()
	{
		drawLine();
		drawSides();
		drawLine();
	}
	public void drawLine()
	{
		skipSpaces(super.getHSpace());
		for(int i=0; i<super.getWidth();i++)
			System.out.println("*");
		System.out.println();
	}
	public void drawSides()
	{
		for(int i=0;i<super.getLength()-2;i++)
		{
			skipSpaces(super.getHSpace());
			System.out.println("*");
			skipSpaces(super.getWidth()-2);
			System.out.println("*");
			System.out.println();
		}
	}
}


public class CheckeredRectangle extends BasicRectangle
{
	public CheckeredRectangle()
	{
		super();
	}
	public CheckeredRectangle(int aH, int aL, int aW)
	{
		super(aH, aL, aW);
	}
	public void drawShape()
	{
		for(int i =0; i<super.getLength();i++)
		{
			for(int j=0;j<super.getWidth();j++)
			{
				if((j+1) % 2 == 0)
					System.out.println("*");
				else
					System.out.println(" ");
			}
			System.out.println();
		}
   }
}

public class UpsideDownTriangle extends BasicTriangle {
	public UpsideDownTriangle()
	{
		super();
	}
	public UpsideDownTriangle(int aH,int aHe)
	{
		super(aH,aHe);
	}
	public void drawShape()
	{
		for(int i = 0;i<super.getHeight();i++)
		{
			skipSpaces(super.getHSpace());
			for(int j = i; j<super.getHeight();j++)
			{
				System.out.println("*");
			}
			System.out.println();
		}
	}
}


