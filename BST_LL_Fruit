public class Fruit implements Comparable<Fruit> {
	private String type;
	private double weight;
	
	public Fruit(){ //default constructor
		type = "apple";
		weight = 1.0;
	}
	public Fruit(String aT, double aP) //para constructor
	{
		this.setType(aT);
		this.setWeight(aP);
	}
	public String getType()
	{
		return this.type;
	}
	public double getWeight()
	{
		return this.weight;
	}
	public void setType(String aT)
	{
		if(aT != null && fruitType(aT))
			this.type = aT;
		else
			this.type = "Apple";
	}
	public boolean fruitType(String aT) //check fruit type
	{
		if(aT.equalsIgnoreCase("orange"))
			return true;
		else if(aT.equalsIgnoreCase("banana"))
			return true;
		else if(aT.equalsIgnoreCase("apple"))
			return true;
		else if(aT.equalsIgnoreCase("kiwi"))
			return true;
		else if(aT.equalsIgnoreCase("tomato"))
			return true;
		else 
			return false;
	}
	public void setWeight(double aP)
	{
		if(aP >= 1.0)
			this.weight = aP;
		else
			this.weight = 1.0 ;
	}
	public String toString()
	{

		return "Type "+this.type+" Weight:"+this.weight;
	}
	public int compareTo(Fruit aF)
	{
		if(aF == null)
			return -1;
		else if(this.weight > aF.getWeight())
			return 1;
		else if(this.weight < aF.getWeight())
			return -1;
		else 
			return this.type.compareTo(aF.type);
	}
	
}


public class LinkedBST <T extends Comparable<T>>{
	private class Node
	{
		T data;
		Node leftChild;
		Node rightChild;
		public Node(T aData)
		{
			data = aData;
			leftChild = rightChild = null;
		}
	}
	private Node root;
	public LinkedBST()
	{
		root = null;
	}
	public void add(T aData)
	{
		if(root == null)
			root = new Node(aData);
		else
			add(root,aData);
	}
	private Node add(Node aNode, T aData) //add into a tree
	{
		if(aNode == null)
			aNode = new Node(aData);
		else if(aData.compareTo(aNode.data)<0)//go left
			aNode.leftChild = add(aNode.leftChild,aData);
		else if(aData.compareTo(aNode.data)>0)
			aNode.rightChild = add(aNode.rightChild,aData);
		return aNode;
	}
	public void printPreOrder()
	{
		printPreOrder(root);
	}
	private void printPreOrder(Node aNode)
	{
		if(aNode == null)
			return;
		System.out.println(aNode.data);
		printPreOrder(aNode.leftChild);
		printPreOrder(aNode.rightChild);
	}
	public void printInOrder()
	{
		printInOrder(root);
	}
	private void printInOrder(Node aNode)
	{
		if(aNode == null)
			return;
		printInOrder(aNode.leftChild);
		System.out.println(aNode.data);
		printInOrder(aNode.rightChild);
	}
	public void printPostOrder()
	{
		printPostOrder(root);
	}
	private void printPostOrder(Node aNode)
	{
		if(aNode == null)
			return;
		printPostOrder(aNode.leftChild);
		printPostOrder(aNode.rightChild);
		System.out.println(aNode.data);
	}
	private boolean search(Node aNode, T aData)
	{
		if(aNode == null)
			return false;
		else if(aData.compareTo(aNode.data)<0) //left
			return search(aNode.leftChild,aData);
		else if(aData.compareTo(aNode.data)>0) //right
			return search(aNode.rightChild,aData);
		else
			return true;
	}
	public void remove(T aData)
	{
		root = remove(root, aData);
	}
	private Node remove(Node aNode, T aData)
	{
		if(aNode == null)
			return null;
		else if(aData.compareTo(aNode.data)<0)
			aNode.leftChild = remove(aNode.leftChild,aData);
		else if(aData.compareTo(aNode.data)>0)
			aNode.rightChild = remove(aNode.rightChild,aData);
		else
		{
			if(aNode.rightChild == null)
				return aNode.leftChild;
			else if(aNode.leftChild == null)
				return aNode.rightChild;
			Node temp = findMinInTree(aNode.rightChild);
			aNode.data = temp.data;
			aNode.rightChild = remove(aNode.rightChild,temp.data);
		}
		return aNode;
	}
	private Node findMinInTree(Node aNode)
	{
		if(aNode == null)
			return null;
		else if(aNode.leftChild == null)
			return aNode;
		else
			return findMinInTree(aNode.leftChild);
	}
}

import java.util.*;
import java.io.*;
public class FruitTreeTester {
	public static LinkedBST<Fruit> fruit = new LinkedBST<Fruit>();
	public static void main(String[] args) {
		System.out.println("!!Fruit!!\nRead a file \"fruitFile.txt\"");
		read();
		System.out.println("\nHere is pre order:");
		fruit.printPreOrder();
		System.out.println("\nHere is in order:");
		fruit.printInOrder();
		System.out.println("\nHere is post order:");
		fruit.printPostOrder();
		System.out.println("\nDeleting a Apple  4.658519644572135 :");
		Fruit a = new Fruit("Apple",4.658519644572135); //create new fruit to delete it
		fruit.remove(a);
		fruit.printInOrder();
	}
	public static void read() //read a file
	{
		try {
			Scanner fileScanner = new Scanner(new File("fruitFile.txt"));
			while(fileScanner.hasNextLine())
			{
				String fileLine = fileScanner.nextLine();
				String[] splitLine = fileLine.split("\t");
				String type = splitLine[0]; //first one is type
				Double weight = Double.parseDouble(splitLine[1]); //second is weight
				fruit.add(new Fruit(type,weight));
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}


