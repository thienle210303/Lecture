import java.util.*;
public class AdjMatrixGraph {
	public static final int DEF_VERT_COUNT = 10;
	private double[][] adjMatrix;
	private LinkedList<Integer> markedList;
	private Queue<Integer> vQ; //Queue in Java is interface
	public AdjMatrixGraph()
	{
		init(DEF_VERT_COUNT);
	}
	public AdjMatrixGraph(int size)
	{
		init(size);
	}
	private void init(int size)
	{
		if(size <= 0)
		{
			init(DEF_VERT_COUNT);
			return;
		}
		adjMatrix = new double[size][size];
		for(int i = 0; i < adjMatrix.length; i++)
			for(int j = 0; j<adjMatrix[i].length;j++)
				adjMatrix[i][j] = 0;
		markedList = new LinkedList<Integer>();
		vQ = new LinkedList<Integer>();
	}
	public void addEdge(int fromVertex, int toVertex, double weight)
	{
		if(!isValid(fromVertex) || !isValid(toVertex))
			return;
		adjMatrix[fromVertex][toVertex] = weight;
	}
	private boolean isValid(int index)
	{
		return index >= 0 && index < adjMatrix.length;
	}
	public void printAdjMatrix()
	{
		for(int i = 0; i< adjMatrix.length;i++)
		{
			for(int j = 0; j <adjMatrix[i].length;j++)
			{
				System.out.print(adjMatrix[i][j]+" ");
			}
			System.out.println();
		}
	}
	public void printDFS() //Depth first search
	{
		markedList.clear();
		printDFS(0);
	}
	private void printDFS(int index)
	{
		System.out.println(index);
		markedList.add(index);
		for(int i = 0; i<adjMatrix.length;i++)
			if(adjMatrix[index][i] != 0.0 && !markedList.contains(i))
				printDFS(i);
	}
	
	public void printBFS()
	{
		markedList.clear();
		vQ.clear();
		markedList.add(0);
		vQ.add(0);
		System.out.println(0);
		while(!vQ.isEmpty())
		{
			int currI = vQ.remove();
			markedList.add(currI);
			for(int i = 0; i < adjMatrix.length;i++)
				if(!markedList.contains(i) && !vQ.contains(i) && adjMatrix[currI][i] != 0.0)
				{
					System.out.println(i);
					vQ.add(i);
				}
		}
	}
}

public class tester {
	public static void main(String[] args) {
		AdjMatrixGraph graph = new AdjMatrixGraph(7);
		
		graph.addEdge(0, 1, 1.0);
		graph.addEdge(0, 3, 1.0);
		
		graph.addEdge(1, 3, 1.0);
		
		graph.addEdge(2, 4, 1.0);
		graph.addEdge(2, 5, 1.0);
		graph.addEdge(2, 5, 1.0);
		
		graph.addEdge(3, 2, 1.0);
		graph.addEdge(3, 4, 1.0);
		
		graph.addEdge(4, 5, 1.0);
		graph.addEdge(4, 6, 1.0);
		
		graph.printAdjMatrix();
		graph.printDFS();
		graph.printBFS();
	}
}

