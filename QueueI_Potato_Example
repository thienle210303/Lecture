public interface QueueI<T> {
	public void enqueue(T aData);
	public T dequeue();
	public T peek();
	public void print();
	public int size();
}

public class LLQueue<T> implements QueueI<T> {
		private class ListNode
		{
			T data;
			ListNode link;
			public ListNode(T aData, ListNode aLink)
			{
				data = aData;
				link = aLink;
			}
		}
		
		private ListNode head;
		private ListNode tail;
		private int size;
		public LLQueue()
		{
			head = tail = null; 
		}
		public void enqueue(T aData)
		{
			ListNode newNode = new ListNode(aData, null);
			if(head == null)
			{
				head = tail = newNode;
				size = 1;
				return;
			}
			tail.link = newNode;
			tail = tail.link;
			size ++;
		}
		public T dequeue()
		{
			if(head == null)
				return null;
			T ret = head.data;
			head = head.link;
			size--;
			return ret;
		}
		public T peek()
		{
			if( head == null)
				return null;
			return head.data;
		}
		public void print()
		{
			for(ListNode temp = head; temp!= null; temp = temp.link)
				System.out.println(temp.data);
		}
		public int size()
		{
			return this.size;
		}
}

import java.util.Random;
public class HotPotatoGame {
	public static final int MIN_RAND_TIME = 10;
	public static final int MAX_RAND_TIME = 21;
	QueueI<String> players;
	private int currentTime;
	public HotPotatoGame()
	{
		init();
	}
	private void init()
	{
		players = new LLQueue<String>();
		this.resetTime();
	}
	public void resetTime()
	{
		Random r = new Random();
		this.currentTime = r.nextInt(MAX_RAND_TIME)+MIN_RAND_TIME;	
	}
	public void addPlayer(String aName)
	{
		if(aName == null)
			return;
		players.enqueue(aName);
	}
	public String getCurrentPlayer()
	{
		return players.dequeue();
	}
	public boolean hasLost(int time)
	{
		this.currentTime -= time;
		return this.currentTime <= 0;
	}
	public boolean getWin()
	{
		return players.size() <= 1;
	}
}

import java.util.Scanner;
public class HotPotatoGameFE {
	
	public static Scanner keyboard = new Scanner(System.in);
	public static HotPotatoGame hpg = new HotPotatoGame();
	public static final int MIN_TIME = 1;
	public static final int MAX_TIME = 10;
	
	public static void main(String[] args) {
		greeting();
		boolean playGame = true;
		while(playGame)
		{
			hpg.resetTime();
			int numPlayers = getNumberOfPlayers();
			addPlayers(numPlayers);
			
			boolean gameOver =false;
			while(!gameOver)
			{
				String player = hpg.getCurrentPlayer();
				System.out.println(player+", enter a time to hold the potato from "+MIN_TIME+" to "+MAX_TIME);
				int time = keyboard.nextInt();
				keyboard.nextLine();
				if(time < MIN_TIME || time > MAX_TIME)
				{
					System.out.println("Incorrect value. Assuming time is "+MAX_TIME);
					time = MAX_TIME;
				}
				if(hpg.hasLost(time))
				{
					System.out.println("Player "+player+" has been eliminated!");
					hpg.resetTime();
				}
				else
				{
					hpg.addPlayer(player);
				}
				gameOver = hpg.getWin();
			}
			System.out.println("The winner is "+hpg.getCurrentPlayer()+"!");
			System.out.println("Enter \"yes\" to play again");
			String input = keyboard.nextLine();
			playGame = input != null && input.equalsIgnoreCase("yes");
		}
		System.out.println("Bye!");
	}
	
	public static void greeting()
	{
		System.out.println("Welcome to the Hot Potato Game");
	}
	public static int getNumberOfPlayers()
	{
		int num = 0;
		while(num <= 1)
		{
			System.out.println("Enter the Number of Players. Must greater than 1");
			num = keyboard.nextInt();
			keyboard.nextLine();
		}
		return num;
	}
	public static void addPlayers(int num)
	{
		int i = 0;
		while(i<num)
		{
			System.out.println("Enter your name player " +i);
			String input = keyboard.nextLine();
			if(input == null || input.isEmpty())
			{
				System.out.println("Invalid Input");
				continue;
			}
			else
			{
				hpg.addPlayer(input);
			}
			i++;
		}
	}

}
