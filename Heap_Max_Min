public class MaxHeap <T extends Comparable<T>> {
	private T[] heap;
	private int size; //first null element
	public static final int DEF_SIZE = 128;
	
	public MaxHeap()
	{
		init(DEF_SIZE);
	}
	public MaxHeap(int aSize)
	{
		init(aSize);
	}
	private void init(int aSize)
	{
		if(aSize <= 0)
		{
			init(DEF_SIZE);
			return;
		}
		heap = (T[])(new Comparable[aSize]);
		size = 0;
	}
	public void add(T aData)
	{
		if(heap[heap.length-1]!= null) //check if tree is full
			return;
		heap[size] = aData;
		bubbleUp();
		size++;
	}
	private void bubbleUp() {
		int index = size;
		while(index > 0 && heap[(index-1)/2].compareTo(heap[index])<0)
		{
			T temp = heap[(index-1)/2];
			heap[(index-1)/2] = heap[index];
			heap[index] = temp;
			index = (index-1)/2;
		}
	}
	public T remove()
	{
		T ret = heap[0];
		heap[0] = heap[size-1];
		heap[size-1] = null;
		size--;
		bubbleDown();
		return ret;
	}
	private void bubbleDown()
	{
		int index = 0;
		while(index*2+1 < size) //check if it have at least left child
		{
			int bigIndex = index*2+1; //child left index
			if(index*2+2 < size && heap[index*2+1].compareTo(heap[index*2+2])<0)
				//check there is right child and check if right > left child
			{
				bigIndex = index*2+2; //child right index
			}
			if(heap[index].compareTo(heap[bigIndex])<0)
			{
				T temp = heap[index];
				heap[index] = heap[bigIndex];
				heap[bigIndex] = temp;
			}
			else
				break;
			index = bigIndex;
		}
	}
	public T peek()
	{
		return heap[0];
	}
	public void print()
	{
		for(int i =0; i<size;i++)
		{
			System.out.println(heap[i]);
		}
	}
}

public class MinHeap <T extends Comparable<T>> {
	private T[] heap;
	public static final int DEF_SIZE = 128;
	private int lastIndex; //first null element
	public MinHeap()
	{
		init(DEF_SIZE);
	}
	public MinHeap(int size)
	{
		init(size);
	}
	private void init(int size)
	{
		if(size > 0)
		{
			heap = (T[])(new Comparable[size]);
			lastIndex = 0;
		}
		else 
			init(DEF_SIZE);
	}
	public void add(T aData)
	{
		if(lastIndex >= heap.length)
			return;
		heap[lastIndex] = aData;
		bubbleUp();
		lastIndex++;
	}
	private void bubbleUp()
	{
		int index = lastIndex;
		while(index > 0 && heap[(index-1)/2].compareTo(heap[index])>0)
		{
			T temp = heap[(index-1)/2];
			heap[(index-1)/2] = heap[index];
			heap[index] = temp;
			index = (index-1)/2;
		}
	}
	public T remove()
	{
		if(lastIndex == 0)
			return null;
		T ret = heap[0];
		heap[0] = heap[lastIndex-1];
		heap[lastIndex-1] = null;
		lastIndex--;
		bubbleDown();
		return ret;
	}
	private void bubbleDown()
	{
		int index = 0;
		while(index*2+1 < lastIndex)
		{
			int smallIndex = index*2+1;
			if(index*2+2 < lastIndex && heap[index*2+1].compareTo(heap[index*2+2])>0)
				smallIndex = index*2+2;
			if(heap[index].compareTo(heap[smallIndex])>0)
			{
				T temp = heap[index];
				heap[index] = heap[smallIndex];
				heap[smallIndex] = temp;
			}
			else 
				break;
			index = smallIndex;
		}
	}
	public void print()
	{
		for(T h:heap)
		{
			if(h==null)
				break;
			System.out.println(h);
		}
	}
	public void heapSort(T[] array)
	{
		if(array == null)
			return;
		MinHeap<T> mHeap = new MinHeap<T>(array.length);
		for(int i = 0;i<array.length;i++)
			mHeap.add(array[i]);
		for(int i = 0; i<array.length;i++)
			array[i] = mHeap.remove();
	}
}

public class HeapTester {
	public static void main(String[] args) {
//		MaxHeap<Integer> iHeap = new MaxHeap<Integer>();
		//MaxHeap<Object> oHeap = new MaxHeap<Object>(); Object is not comparable 
		MaxHeap<String> sHeap = new MaxHeap<String>();
		sHeap.add("a");
		sHeap.add("aaaa");
		sHeap.add("aAaaaa");
		sHeap.add("aaaaaaaaaaaa");
		sHeap.add("aaaaaaa");
		
		sHeap.print();
		sHeap.remove();
		sHeap.print();
		
		MinHeap<Integer> mHeap = new MinHeap<Integer>();
		Integer[] iArray = {5,1,4,3,6,2};
		mHeap.heapSort(iArray);
		for(Integer i: iArray)
			System.out.println(i);
}
}


