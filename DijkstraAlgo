import java.util.PriorityQueue;

public class DijkstraAlgo {
	public static Vertex dijkstras(Vertex[][] graph, Vertex start, Vertex end)
	{
		PriorityQueue<Vertex> pQ = new PriorityQueue<Vertex>();
		graph[start.y][start.x].dist = 0;
		pQ.add(graph[start.y][start.x]);
		while(!pQ.isEmpty())
		{
			Vertex currV = pQ.remove();
			for(int i = currV.y-1, i<=currV.y+1;i++)
			{
				for(int j=currV.x-1; j<=currV.x+1;j++)
				{
					if(i == currV.y && j == currV.x)
						continue;
					if(isValid(i) && isValid(j) && graph[i][j]!= null)
					{
						//Case we have not arrive at this vertex yet
						if(graph[i][j].dist >= Double.MAX_VALUE)
						{
							graph[i][j].dist = currV.dist+
									Vertex.distance(currV, graph[i][j]);
							graph[i][j].prev = currV;
							if(pQ.contains(graph[i][j]))
								pQ.remove(graph[i][j]);
							pQ.add(graph[i][j]);
						}
						//Case we have arrived at the vertex before
						else
						{
							double newDIst = currV.dist+
									Vertex.distance(currV, graph[i][j]);
							if(newDist < graph[i][j].dist)
							{
								//we found a shrter distance
								graph[i][j].dist = newDist;
								graph[i][j].prev = currV;
								if(pQ.contains(graph[i][j]))
									pQ.remove(graph[i][j]);
								pQ.add(graph[i][j]);
							}
						}
					}
						
				}
			}
			if(graph[end.y][end.x].prev == null)
				return null;
			else
				return graph[end.y][end.x];
		}
		
	}
	
}
