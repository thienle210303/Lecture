public class Sandwich {
	private String name; //properties
	private double basePrice;
	private int extras;
	public static final double PRICE_PER_EXTRA = 0.99;
	
	public Sandwich() //default constructor
	{
		this.name = "none";
		this.basePrice = 1.0;
		this.extras = 0;
	}
	public Sandwich(String aN, double aB, int aE) //para constructor
	{
		this.setName(aN);
		this.setBasePrice(aB);
		this.setExtras(aE);
	}
	public String getName() //Accessors
	{
		return this.name;
	}
	public double getBasePrice()
	{
		return this.basePrice;
	}
	public int getExtras()
	{
		return this.extras;
	}
	public void setName(String aN)//Mutators
	{
		if(aN != null)
			this.name = aN;
		else 
			this.name = "none";
	}
	public void setBasePrice(double aB)
	{
		if(aB<0)
			this.basePrice = 1.0;
		else
			this.basePrice = aB;
	}
	public void setExtras(int aE)
	{
		if(aE<0)
			this.extras = 0;
		else
			this.extras = aE;
	}
	public double getTotalPrice()//find the total price of extra 
	{
		return this.extras*PRICE_PER_EXTRA;
	}
	public String toString()//toString method
	{
		return "Name: "+this.name+" Base Price: "+this.basePrice+" Extras: "+this.extras+" Total: "+getTotalPrice();
	}
	public boolean equals(Sandwich aS)//equals method
	{
		return aS != null &&
				this.name.equalsIgnoreCase(aS.name) &&
				this.basePrice == aS.basePrice &&
				extras == aS.extras;
	}
    public static Sandwich mostExpensive(Sandwich s1, Sandwich s2) {
        if (s1 == null) {
            return s2;
        }
        if (s2 == null) {
            return s1;
        }

        if (s1.getTotalPrice() > s2.getTotalPrice()) {
            return s1;
        }
        if (s1.getTotalPrice() < s2.getTotalPrice()) {
            return s2;
        }
		return s1;
    }
	
}


public class Question01 {

	public static void main(String[] args) 
	{
		//Check for Syntax errors in this file
		
		//Question 01 Tests
		System.out.println("Question01 Tests");
		//Testing Class Constant
		System.out.println("The class constant is: "+ Sandwich.PRICE_PER_EXTRA);
		//Declare a new instance of a sandwich
		Sandwich s;
		//Construct it with the default constructor
		System.out.println("Constructing a new instance of Sandwich using the Default Constructor");
		s = new Sandwich();
		//Testing Accessors
		System.out.println("Testing Accessors");
		System.out.println("Name: "+ s.getName());
		System.out.println("Base Price: "+s.getBasePrice());
		System.out.println("Extras: "+s.getExtras());
		//Testing Mutators
		System.out.println("Testing Mutators with Correct Values");
		s.setName("ASDF");
		s.setBasePrice(4.99);
		s.setExtras(2);
		System.out.println("Testing Accessors");
		System.out.println("Name: "+ s.getName());
		System.out.println("Base Price: "+s.getBasePrice());
		System.out.println("Extras: "+s.getExtras());
		System.out.println("Testing Mutators with Incorrect Values");
		s.setName(null);
		s.setBasePrice(-10.00);
		s.setExtras(-14);
		System.out.println("Name: "+ s.getName());
		System.out.println("Base Price: "+s.getBasePrice());
		System.out.println("Extras: "+s.getExtras());
		//Creating another instance of a Pizza using the Param constructor
		System.out.println("Constructing a new instance of Sandwich using the Param Constructor");
		Sandwich s2 = new Sandwich("ASDF2",7.99,4);
		System.out.println("Name: "+ s2.getName());
		System.out.println("Base Price: "+s2.getBasePrice());
		System.out.println("Extras: "+s2.getExtras());
	}
}

	public class Question02 {

		public static void main(String[] args) 
		{
			//Check for Syntax errors in this file		
			//Question 02 Tests
			//Construct it with the default constructor
			System.out.println("Constructing 2 instances of Sandwich using the Default Constructor");
			Sandwich s = new Sandwich();
			Sandwich s2 = new Sandwich();		

			//Testing Equals method
			System.out.println("Testing Equals Method with 2 Sandwiches that have the same properties");
			System.out.println("Are they equal? "+s.equals(s2));
			System.out.println("Setting values of Sandwich 2 to have different values.\nTesting Equals Method with 2 Sandwiches that have different properties");
			s2.setName("ASDF");
			s2.setBasePrice(5.00);
			s2.setExtras(11);
			
			System.out.println("Are they equal? "+s.equals(s2));
			System.out.println("Setting value of Sandwich 2 to null.\nTesting Equals Method with 2 Sandwiches where one is null");
			s2 = null;
			System.out.println("Are they equal? "+s.equals(s2));
			
			//Testing get total price method
			System.out.println("Testing Get Total Price method.\nResetting Sandwich 2");
			s2 = new Sandwich("ASDF",5.00,11);
			System.out.println("Sandwich 2's total price is: " + s2.getTotalPrice());
			
			//Testing toString Method
			System.out.println("Testing the toString Method on Sandwich 2");
			System.out.println(s2);
			
			//Testing Most Expensive method
			System.out.println("Testing Most Expensive Method with Sandwich 1 and Sandwich 2");
			System.out.println(Sandwich.mostExpensive(s, s2));
			System.out.println("Testing Most Expensive Method with Sandwich 1 and null");
			System.out.println(Sandwich.mostExpensive(s, null));
			System.out.println("Testing Most Expensive Method with null and null");
			System.out.println(Sandwich.mostExpensive(null, null));
		}

	}
