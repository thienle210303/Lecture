public interface QueueI <T>
{
	public void enqueue(T aData);
	public T dequeue();
	public T peek();
	public void print();
}

public class LLQueue<T> implements QueueI<T> {
		private class ListNode
		{
			T data;
			ListNode link;
			public ListNode(T aData, ListNode aLink)
			{
				data = aData;
				link = aLink;
			}
		}
		
		private ListNode head;
		private ListNode tail;
		public LLQueue()
		{
			head = tail = null; 
		}
		public void enqueue(T aData)
		{
			ListNode newNode = new ListNode(aData, null);
			if(head == null)
			{
				head = tail = newNode;
				return;
			}
			tail.link = newNode;
			tail = tail.link;
		}
		public T dequeue()
		{
			if(head == null)
				return null;
			T ret = head.data;
			head = head.link;
			return ret;
		}
		public T peek()
		{
			if( head == null)
				return null;
			return head.data;
		}
		public void print()
		{
			for(ListNode temp = head; temp!= null; temp = temp.link)
				System.out.println(temp.data);
		}
}

public class ArrayQueue<T> implements QueueI<T> {
	private T[] queue;
	private int headIndex; //First element
	private int tailIndex; //First NULL element / 1 past the last element
	public static final int DEF_SIZE = 100;
	
	public ArrayQueue()
	{
		init(DEF_SIZE);
	}
	public ArrayQueue(int size)
	{
		init(size);
	}
	private void init(int size)
	{
		headIndex = tailIndex = 0;
		if(size >= 1)
			queue = (T[])(new Object[size]);
		else
			queue = (T[])(new Object[DEF_SIZE]);
	}
	public void enqueue(T aData)
	{
		if(queue[headIndex] != null && headIndex == tailIndex)
			return;
		queue[tailIndex] = aData;
		tailIndex = (tailIndex+1)%queue.length;
	}
	public T dequeue()
	{
		T ret = queue[headIndex];
		headIndex = (headIndex+1)%queue.length;
		return ret;
	}
	public T peek()
	{
		return queue[headIndex];
	}
	public void print()
	{
		System.out.println(queue[headIndex]);
		for(int i = (headIndex+1)%queue.length; i!= tailIndex; i = (i+1)%queue.length)
			System.out.println(queue[i]);
	}
}
